package com.android.camera.effect.renders;

import com.android.gallery3d.ui.GLCanvas;
import java.nio.IntBuffer;

public class InstagramClarendonEffectRender extends PixelEffectRender {
    private static final int[] sBLut = new int[]{0, 1, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 130, 131, 133, 134, 136, 137, 139, 141, 143, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 167, 169, 171, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 185, 186, 186, 187, 187, 187, 188, 188, 189, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 214, 215, 216, 216, 217, 217, 217, 218, 218, 218, 219, 219, 219, 220, 220, 220, 221, 221, 222, 223, 223, 224, 225, 226, 227, 228, 230, 231, 232, 234, 236, 237, 239, 241, 242, 244, 246, 248, 250, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255};
    private static final int[] sGLut = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 18, 19, 20, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 46, 48, 50, 52, 54, 57, 59, 62, 65, 67, 70, 73, 76, 79, 82, 85, 87, 90, 93, 96, 99, 101, 104, 107, 109, 111, 114, 116, 118, 120, 122, 124, 125, 127, 129, 131, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 154, 155, 156, 157, 158, 158, 159, 160, 161, 162, 162, 163, 164, 165, 166, 166, 167, 168, 169, 170, 171, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 209, 210, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 222, 222, 223, 224, 224, 225, 226, 227, 228, 229, 230, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 243, 244, 245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 251, 251, 251, 252, 252, 252, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255};
    private static IntBuffer sRGBLutBuffer;
    private static final int[] sRLut = new int[]{0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 24, 25, 26, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 126, 128, 129, 131, 132, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 199, 200, 201, 202, 203, 204, 205, 206, 206, 207, 208, 209, 210, 211, 211, 212, 213, 214, 215, 215, 216, 217, 218, 219, 219, 220, 221, 222, 222, 223, 224, 225, 225, 226, 227, 227, 228, 229, 230, 230, 231, 232, 232, 233, 234, 234, 235, 236, 236, 237, 238, 238, 239, 240, 240, 241, 242, 242, 243, 244, 244, 245, 246, 246, 247, 247, 248, 249, 249, 250, 251, 251, 252, 252, 253, 254, 254, 255};

    private static IntBuffer getRGBLutBuffer() {
        if (sRGBLutBuffer == null) {
            int[] rgbLut = new int[sRLut.length];
            for (int i = 0; i < rgbLut.length; i++) {
                rgbLut[i] = (((sBLut[i] << 16) | -16777216) | (sGLut[i] << 8)) | sRLut[i];
            }
            sRGBLutBuffer = IntBuffer.wrap(rgbLut);
        }
        sRGBLutBuffer.rewind();
        return sRGBLutBuffer;
    }

    public static Render create(GLCanvas canvas, int id) {
        CurveEffectRender firstPassRender = new CurveEffectRender(canvas, id);
        firstPassRender.setRGBTransLutBuffer(getRGBLutBuffer());
        return new PipeRenderPair(canvas, firstPassRender, new InstagramClarendonEffectRender(canvas, id), false);
    }

    protected InstagramClarendonEffectRender(GLCanvas canvas, int id) {
        super(canvas, id);
    }

    public String getFragShaderString() {
        return "precision mediump int; \nprecision highp float; \nuniform sampler2D sTexture; \nvarying vec2 vTexCoord; \nuniform float uAlpha; \nvec3 get_max_min_mid(float r, float g, float b) { \n    float max_d = max(max(r, g), b); \n    float min_d = min(min(r, g), b); \n    float mid_d = r + g + b - max_d - min_d; \n    return vec3(max_d, mid_d, min_d); \n} \nfloat get_H(float r, float g, float b, float max_rgb, float delta) { \n    float H = 0.0, ff = 60.0 / delta; \n    if (r == max_rgb) { \n        H = (g - b) * ff; \n    } else if (g == max_rgb) { \n        H = (b - r) * ff + 120.0; \n    } else { \n        H = (r - g) * ff + 240.0; \n    } \n    return H; \n} \nvec2 swap_data(vec2 f_data) { \n    float tmp = f_data.s; \n    f_data.s = f_data.t; \n    f_data.t = tmp; \n    return f_data; \n} \nvec4 tune_hue_(vec4 color, float h_values, float H) { \n    if (h_values == 0.0) { \n        return color; \n    } else { \n        vec3 max_min_v = get_max_min_mid(color.r, color.g, color.b); \n        float rr = max_min_v.r, bb = max_min_v.b, gg = 0.0; \n        float HH = H + h_values, LL = (rr + bb) / 2.0, Lnum = (LL - 0.5) * 255.0, SS; \n        if (HH < 0.0) { \n            HH = HH + 360.0; \n        } \n        if (HH > 360.0) { \n            HH = HH - 360.0; \n        } \n        if (LL < 0.5) { \n            SS = (rr - bb) / (rr + bb); \n        } else { \n            SS = (rr - bb) / (2.0 - (rr + bb)); \n        } \n        int H_index = int(HH / 60.0); \n        float extra = HH - float(H_index * 60); \n        if ((int(float(H_index) / 2.0) * 2) != H_index) { \n            extra = 60.0 - extra; \n        } \n        extra = (extra * 255.0 + 32.0) / 60.0; \n        gg = extra - (extra - 128.0) * (1.0 - SS); \n        if (Lnum > 0.0) { \n            gg = gg + (((255.0 - gg) * Lnum + 64.0) / 128.0); \n        } else { \n            gg = gg + (gg * Lnum / 128.0); \n        } \n        gg = gg / 255.0; \n        gg = min(max(gg, 0.0), 1.0); \n        if (H_index == 1) { \n            vec2 f_data = swap_data(vec2(rr, gg)); \n            rr = f_data.s; \n            gg = f_data.t; \n        } else if (H_index == 2) { \n            vec2 f_data = swap_data(vec2(rr, bb)); \n            rr = f_data.s; \n            bb = f_data.t; \n            f_data = swap_data(vec2(gg, bb)); \n            gg = f_data.s; \n            bb = f_data.t; \n        } else if (H_index == 3) { \n            vec2 f_data = swap_data(vec2(rr, bb)); \n            rr = f_data.s; \n            bb = f_data.t; \n        } else if (H_index == 4) { \n            vec2 f_data = swap_data(vec2(rr, gg)); \n            rr = f_data.s; \n            gg = f_data.t; \n            f_data = swap_data(vec2(gg, bb)); \n            gg = f_data.s; \n            bb = f_data.t; \n        } else if (H_index == 5) { \n            vec2 f_data = swap_data(vec2(gg, bb)); \n            gg = f_data.s; \n            bb = f_data.t; \n        } \n        return vec4(rr, gg, bb, 1.0); \n    } \n} \nvec4 tune_s_(vec4 color, float sValue) { \n    if (sValue == 0.0) { \n        return color; \n    } \n    vec3 max_min_v = get_max_min_mid(color.r, color.g, color.b); \n    float LL = (max_min_v.r + max_min_v.b) / 2.0, SS = 0.0, S_data = 0.0; \n    if (LL < 0.5) { \n        SS = (max_min_v.r - max_min_v.b) / (max_min_v.r + max_min_v.b); \n    } else { \n        SS = (max_min_v.r - max_min_v.b) / (2.0 - (max_min_v.r + max_min_v.b)); \n    } \n    S_data = sValue; \n    if (sValue > 0.0) { \n        float S1 = SS + sValue; \n        if (S1 > 1.0) { \n            S1 = SS; \n        } else { \n            S1 = 1.0 - sValue; \n        } \n        S_data = 1.0 / S1 - 1.0; \n    } \n    vec4 dst_color; \n    dst_color = color + (color - LL) * S_data; \n    dst_color = clamp(dst_color, 0.0, 1.0); \n    return dst_color; \n} \nvec4 tune_b_(vec4 color, float bValue, float max_v, float min_v) { \n    if (bValue == 0.0) { \n        return color; \n    } else { \n        vec4 rgb_color; \n        if (bValue > 0.0) { \n            rgb_color = color + (max_v - color) * bValue; \n        } else { \n            rgb_color = color + (color - min_v) * bValue; \n        } \n        rgb_color = clamp(rgb_color, 0.0, 1.0); \n        return rgb_color; \n    } \n} \nvec4 tune_Process(vec4 color, vec3 prames1, vec3 prames2) { \n    float r = float(int(color.r * 255.0)) / 255.0, g = float(int(color.g * 255.0)) / 255.0, b = float(int(color.b * 255.0)) / 255.0; \n    vec3 max_min_v = get_max_min_mid(r, g, b); \n    float dst_r = r, dst_g = g, dst_b = b; \n    float delta = (max_min_v.r - max_min_v.b), entire = (max_min_v.r + max_min_v.b); \n    float L = entire / 2.0; \n    if (delta == 0.0) { \n        return color; \n    } else { \n        float H = get_H(r, g, b, max_min_v.r, delta); \n        float h_values = 0.0, s_values = 0.0, v_values = 0.0, f_ratio = 0.0; \n        vec3 hsv_values = vec3(0.0, 0.0, 0.0); \n        float HH = H; \n        if (HH < 0.0) { \n            HH = HH + 360.0; \n        } \n        if (HH > 360.0) { \n            HH = HH - 360.0; \n        } \n        if (((HH > 315.0 || HH < 45.0) || (HH > 195.0 && HH < 285.0))) { \n            if (HH > 315.0 && HH < 345.0) { \n                f_ratio = (HH - 315.0) / 30.0; \n                hsv_values = prames1 * f_ratio; \n            } else if (HH >= 345.0 || HH <= 15.0) { \n                f_ratio = 1.0; \n                hsv_values = prames1 * f_ratio; \n            } else if (HH > 15.0 && HH < 45.0) { \n                f_ratio = (45.0 - HH) / 30.0; \n                hsv_values = prames1 * f_ratio; \n            } else if (HH > 195.0 && HH < 225.0) { \n                f_ratio = (HH - 195.0) / 30.0; \n                hsv_values = prames2 * f_ratio; \n            } else if (HH >= 225.0 && HH <= 255.0) { \n                f_ratio = 1.0; \n                hsv_values = prames2 * f_ratio; \n            } else if (HH > 255.0 && HH < 285.0) { \n                f_ratio = (285.0 - HH) / 30.0; \n                hsv_values = prames2 * f_ratio; \n            } \n        } \n        v_values = hsv_values.b; \n        vec4 dst_color; \n        dst_color = tune_b_(color, v_values, max_min_v.r, max_min_v.b); \n        h_values = hsv_values.r; \n        dst_color = tune_hue_(dst_color, h_values, H); \n        s_values = hsv_values.g; \n        dst_color = tune_s_(dst_color, s_values); \n        return dst_color; \n    } \n} \nvoid main() { \n    vec4 color = texture2D(sTexture, vTexCoord); \n    vec3 redPrames = vec3(-3.0, 0.3, 0.01); \n    vec3 bluePrames = vec3(0.0, 0.28, -0.07); \n    color = tune_Process(color, redPrames, bluePrames); \n    gl_FragColor = color*uAlpha; \n}";
    }
}
